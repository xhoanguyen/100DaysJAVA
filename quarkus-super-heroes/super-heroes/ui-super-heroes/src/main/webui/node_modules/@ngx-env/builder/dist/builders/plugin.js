"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = void 0;
const dotenv_1 = require("dotenv");
const dotenv_expand = require("dotenv-expand");
const webpack = require("webpack");
const fs = require("fs");
const path = require("path");
function escapeStringRegexp(str) {
    return str.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function getClientEnvironment(prefix) {
    const env = process.env.NG_APP_ENV || process.env.NODE_ENV;
    const dotenvBase = path.resolve(process.cwd(), ".env");
    const dotenvFiles = [
        env && `${dotenvBase}.${env}.local`,
        // Don't include `.env.local` for `test` environment
        // since normally you expect tests to produce the same
        // results for everyone
        env && env !== "test" && `${dotenvBase}.local`,
        env && `${dotenvBase}.${env}`,
        dotenvBase,
    ].filter(Boolean);
    // Load environment variables from .env* files. Suppress warnings using silent
    // if this file is missing. dotenv will never modify any environment variables
    // that have already been set.  Variable expansion is supported in .env files.
    // https://github.com/motdotla/dotenv
    // https://github.com/motdotla/dotenv-expand
    dotenvFiles.forEach((dotenvFile) => {
        if (fs.existsSync(dotenvFile)) {
            dotenv_expand((0, dotenv_1.config)({
                path: dotenvFile,
            }));
        }
    });
    const processEnv = Object.assign(Object.assign({}, process.env), { NG_APP_ENV: env });
    return Object.keys(processEnv)
        .filter((key) => prefix.test(key))
        .reduce((env, key) => {
        env.raw[key] = processEnv[key];
        env.stringified[key] = JSON.stringify(processEnv[key]);
        return env;
    }, {
        raw: {},
        stringified: {},
    });
}
function plugin() {
    const { raw, stringified } = getClientEnvironment(/^NG_APP/i);
    return {
        webpackConfiguration: (webpackConfig) => __awaiter(this, void 0, void 0, function* () {
            webpackConfig.plugins.push(new webpack.DefinePlugin({
                "process.env": stringified,
            }));
            return webpackConfig;
        }),
        indexHtml: (content) => __awaiter(this, void 0, void 0, function* () {
            const rawWithEnv = Object.assign(Object.assign({}, raw), { NG_APP_ENV: raw["NG_APP_ENV"] });
            return Object.keys(rawWithEnv).reduce((html, key) => html.replace(new RegExp("%" + escapeStringRegexp(key) + "%", "g"), rawWithEnv[key]), content);
        }),
    };
}
exports.plugin = plugin;
